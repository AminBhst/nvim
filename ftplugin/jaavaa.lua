--[[ vim.opt_local.shiftwidth = 2 ]]
--[[ vim.opt_local.tabstop = 2 ]]
--[[ vim.opt_local.cmdheight = 2 -- more space in the neovim command line for displaying messages ]]
--[[]]
--[[ local capabilities = vim.lsp.protocol.make_client_capabilities() ]]
--[[]]
--[[ local status_cmp_ok, cmp_nvim_lsp = pcall(require, "cmp_nvim_lsp") ]]
--[[ if not status_cmp_ok then ]]
--[[   return ]]
--[[ end ]]
--[[ capabilities.textdocument.completion.completionitem.snippetsupport = false ]]
--[[ capabilities = cmp_nvim_lsp.default_capabilities(capabilities) ]]
--[[]]
--[[ local status, jdtls = pcall(require, "jdtls") ]]
--[[ if not status then ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ -- determine os ]]
--[[ local home = os.getenv "home" ]]
--[[ if vim.fn.has "mac" == 1 then ]]
--[[   workspace_path = home .. "/workspace/" ]]
--[[   config = "mac" ]]
--[[ elseif vim.fn.has "unix" == 1 then ]]
--[[   workspace_path = home .. "/workspace/" ]]
--[[   config = "linux" ]]
--[[ else ]]
--[[   print "unsupported system" ]]
--[[ end ]]
--[[]]
--[[ -- find root of project ]]
--[[ local root_markers = { ".git", "mvnw", "gradlew", "pom.xml", "build.gradle" } ]]
--[[ local root_dir = require("jdtls.setup").find_root(root_markers) ]]
--[[ if root_dir == "" then ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ local extendedclientcapabilities = jdtls.extendedclientcapabilities ]]
--[[ extendedclientcapabilities.resolveadditionaltexteditssupport = true ]]
--[[]]
--[[ local project_name = vim.fn.fnamemodify(vim.fn.getcwd(), ":p:h:t") ]]
--[[]]
--[[ local workspace_dir = workspace_path .. project_name ]]
--[[]]
--[[ -- todo: testing ]]
--[[]]
--[[ java_dap_active = true ]]
--[[]]
--[[ local bundles = {} ]]
--[[]]
--[[ if java_dap_active then ]]
--[[   vim.list_extend(bundles, vim.split(vim.fn.glob(home .. "/.config/nvim/vscode-java-test/server/*.jar"), "\n")) ]]
--[[   vim.list_extend( ]]
--[[     bundles, ]]
--[[     vim.split( ]]
--[[       vim.fn.glob( ]]
--[[         home .. "/.config/nvim/java-debug/com.microsoft.java.debug.plugin/target/com.microsoft.java.debug.plugin-*.jar" ]]
--[[       ), ]]
--[[       "\n" ]]
--[[     ) ]]
--[[   ) ]]
--[[ end ]]
--[[]]
--[[ -- see `:help vim.lsp.start_client` for an overview of the supported `config` options. ]]
--[[ local config = { ]]
--[[   -- the command that starts the language server ]]
--[[   -- see: https://github.com/eclipse/eclipse.jdt.ls#running-from-the-command-line ]]
--[[   cmd = { ]]
--[[]]
--[[     -- ðŸ’€ ]]
--[[     "java", -- or '/path/to/java11_or_newer/bin/java' ]]
--[[     -- depends on if `java` is in your $path env variable and if it points to the right version. ]]
--[[]]
--[[     "-declipse.application=org.eclipse.jdt.ls.core.id1", ]]
--[[     "-dosgi.bundles.defaultstartlevel=4", ]]
--[[     "-declipse.product=org.eclipse.jdt.ls.core.product", ]]
--[[     "-dlog.protocol=true", ]]
--[[     "-dlog.level=all", ]]
--[[     "-javaagent:" .. home .. "/.local/share/nvim/lsp_servers/jdtls/lombok.jar", ]]
--[[     "-xms1g", ]]
--[[     "--add-modules=all-system", ]]
--[[     "--add-opens", ]]
--[[     "java.base/java.util=all-unnamed", ]]
--[[     "--add-opens", ]]
--[[     "java.base/java.lang=all-unnamed", ]]
--[[]]
--[[     -- ðŸ’€ ]]
--[[     "-jar", ]]
--[[     vim.fn.glob(home .. "/.local/share/nvim/lsp_servers/jdtls/plugins/org.eclipse.equinox.launcher_*.jar"), ]]
--[[     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^                                       ^^^^^^^^^^^^^^ ]]
--[[     -- must point to the                                                     change this to ]]
--[[     -- eclipse.jdt.ls installation                                           the actual version ]]
--[[]]
--[[     -- ðŸ’€ ]]
--[[     "-configuration", ]]
--[[     home .. "/.local/share/nvim/lsp_servers/jdtls/config_" .. config, ]]
--[[     -- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^        ^^^^^^ ]]
--[[     -- must point to the                      change to one of `linux`, `win` or `mac` ]]
--[[     -- eclipse.jdt.ls installation            depending on your system. ]]
--[[]]
--[[     -- ðŸ’€ ]]
--[[     -- see `data directory configuration` section in the readme ]]
--[[     "-data", ]]
--[[     workspace_dir, ]]
--[[   }, ]]
--[[]]
--[[   on_attach = require("user.lsp.handlers").on_attach, ]]
--[[   capabilities = capabilities, ]]
--[[]]
--[[   -- ðŸ’€ ]]
--[[   -- this is the default if not provided, you can remove it. or adjust as needed. ]]
--[[   -- one dedicated lsp server & client will be started per unique root_dir ]]
--[[   root_dir = root_dir, ]]
--[[]]
--[[   -- here you can configure eclipse.jdt.ls specific settings ]]
--[[   -- see https://github.com/eclipse/eclipse.jdt.ls/wiki/running-the-java-ls-server-from-the-command-line#initialize-request ]]
--[[   -- or https://github.com/redhat-developer/vscode-java#supported-vs-code-settings ]]
--[[   -- for a list of options ]]
--[[   settings = { ]]
--[[     java = { ]]
--[[       -- jdt = { ]]
--[[       --   ls = { ]]
--[[       --     vmargs = "-xx:+useparallelgc -xx:gctimeratio=4 -xx:adaptivesizepolicyweight=90 -dsun.zip.disablememorymapping=true -xmx1g -xms100m" ]]
--[[       --   } ]]
--[[       -- }, ]]
--[[       eclipse = { ]]
--[[         downloadsources = true, ]]
--[[       }, ]]
--[[       configuration = { ]]
--[[         updatebuildconfiguration = "interactive", ]]
--[[       }, ]]
--[[       maven = { ]]
--[[         downloadsources = true, ]]
--[[       }, ]]
--[[       implementationscodelens = { ]]
--[[         enabled = true, ]]
--[[       }, ]]
--[[       referencescodelens = { ]]
--[[         enabled = true, ]]
--[[       }, ]]
--[[       references = { ]]
--[[         includedecompiledsources = true, ]]
--[[       }, ]]
--[[       inlayhints = { ]]
--[[         parameternames = { ]]
--[[           enabled = "all", -- literals, all, none ]]
--[[         }, ]]
--[[       }, ]]
--[[       format = { ]]
--[[         enabled = false, ]]
--[[         -- settings = { ]]
--[[         --   profile = "asdf" ]]
--[[         -- } ]]
--[[       }, ]]
--[[     }, ]]
--[[     signaturehelp = { enabled = true }, ]]
--[[     completion = { ]]
--[[       favoritestaticmembers = { ]]
--[[         "org.hamcrest.matcherassert.assertthat", ]]
--[[         "org.hamcrest.matchers.*", ]]
--[[         "org.hamcrest.corematchers.*", ]]
--[[         "org.junit.jupiter.api.assertions.*", ]]
--[[         "java.util.objects.requirenonnull", ]]
--[[         "java.util.objects.requirenonnullelse", ]]
--[[         "org.mockito.mockito.*", ]]
--[[       }, ]]
--[[     }, ]]
--[[     contentprovider = { preferred = "fernflower" }, ]]
--[[     extendedclientcapabilities = extendedclientcapabilities, ]]
--[[     sources = { ]]
--[[       organizeimports = { ]]
--[[         starthreshold = 9999, ]]
--[[         staticstarthreshold = 9999, ]]
--[[       }, ]]
--[[     }, ]]
--[[     codegeneration = { ]]
--[[       tostring = { ]]
--[[         template = "${object.classname}{${member.name()}=${member.value}, ${othermembers}}", ]]
--[[       }, ]]
--[[       useblocks = true, ]]
--[[     }, ]]
--[[   }, ]]
--[[]]
--[[   flags = { ]]
--[[     allow_incremental_sync = true, ]]
--[[   }, ]]
--[[]]
--[[   -- language server `initializationoptions` ]]
--[[   -- you need to extend the `bundles` with paths to jar files ]]
--[[   -- if you want to use additional eclipse.jdt.ls plugins. ]]
--[[   -- ]]
--[[   -- see https://github.com/mfussenegger/nvim-jdtls#java-debug-installation ]]
--[[   -- ]]
--[[   -- if you don't plan on using the debugger or other eclipse.jdt.ls plugins you can remove this ]]
--[[   init_options = { ]]
--[[     -- bundles = {}, ]]
--[[     bundles = bundles, ]]
--[[   }, ]]
--[[ } ]]
--[[]]
--[[ -- this starts a new client & server, ]]
--[[ -- or attaches to an existing client & server depending on the `root_dir`. ]]
--[[ jdtls.start_or_attach(config) ]]
--[[]]
--[[ -- require('jdtls').setup_dap() ]]
--[[]]
--[[ vim.cmd "command! -buffer -nargs=? -complete=custom,v:lua.require'jdtls'._complete_compile jdtcompile lua require('jdtls').compile(<f-args>)" ]]
--[[ vim.cmd "command! -buffer -nargs=? -complete=custom,v:lua.require'jdtls'._complete_set_runtime jdtsetruntime lua require('jdtls').set_runtime(<f-args>)" ]]
--[[ vim.cmd "command! -buffer jdtupdateconfig lua require('jdtls').update_project_config()" ]]
-- vim.cmd "command! -buffer JdtJol lua require('jdtls').jol()"
--[[ vim.cmd "command! -buffer JdtBytecode lua require('jdtls').javap()" ]]
-- vim.cmd "command! -buffer JdtJshell lua require('jdtls').jshell()"

--[[ local status_ok, which_key = pcall(require, "which-key") ]]
--[[ if not status_ok then ]]
--[[   return ]]
--[[ end ]]
--[[]]
--[[ local opts = { ]]
--[[   mode = "n", -- NORMAL mode ]]
--[[   prefix = "<leader>", ]]
--[[   buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings ]]
--[[   silent = true, -- use `silent` when creating keymaps ]]
--[[   noremap = true, -- use `noremap` when creating keymaps ]]
--[[   nowait = true, -- use `nowait` when creating keymaps ]]
--[[ } ]]
--[[]]
--[[ local vopts = { ]]
--[[   mode = "v", -- VISUAL mode ]]
--[[   prefix = "<leader>", ]]
--[[   buffer = nil, -- Global mappings. Specify a buffer number for buffer local mappings ]]
--[[   silent = true, -- use `silent` when creating keymaps ]]
--[[   noremap = true, -- use `noremap` when creating keymaps ]]
--[[   nowait = true, -- use `nowait` when creating keymaps ]]
--[[ } ]]
--[[]]
--[[ local mappings = { ]]
--[[   L = { ]]
--[[     name = "Java", ]]
--[[     o = { "<Cmd>lua require'jdtls'.organize_imports()<CR>", "Organize Imports" }, ]]
--[[     v = { "<Cmd>lua require('jdtls').extract_variable()<CR>", "Extract Variable" }, ]]
--[[     c = { "<Cmd>lua require('jdtls').extract_constant()<CR>", "Extract Constant" }, ]]
--[[     t = { "<Cmd>lua require'jdtls'.test_nearest_method()<CR>", "Test Method" }, ]]
--[[     T = { "<Cmd>lua require'jdtls'.test_class()<CR>", "Test Class" }, ]]
--[[     u = { "<Cmd>JdtUpdateConfig<CR>", "Update Config" }, ]]
--[[   }, ]]
--[[ } ]]
--[[]]
--[[ local vmappings = { ]]
--[[   L = { ]]
--[[     name = "Java", ]]
--[[     v = { "<Esc><Cmd>lua require('jdtls').extract_variable(true)<CR>", "Extract Variable" }, ]]
--[[     c = { "<Esc><Cmd>lua require('jdtls').extract_constant(true)<CR>", "Extract Constant" }, ]]
--[[     m = { "<Esc><Cmd>lua require('jdtls').extract_method(true)<CR>", "Extract Method" }, ]]
--[[   }, ]]
--[[ } ]]
--[[]]
--[[ which_key.register(mappings, opts) ]]
--[[ which_key.register(vmappings, vopts) ]]
--[[]]
-- debugging
-- git clone git@github.com:microsoft/java-debug.git
